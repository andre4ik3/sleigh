name: CI
on: push

jobs:
  init:
    name: Initialization
    runs-on: ubuntu-latest

    outputs:
      skip: ${{ steps.ci-skip-step.outputs.ci-skip }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check CI Skip Status
        id: ci-skip-step
        uses: mstachniuk/ci-skip@master

  lint:
    name: Lint Code with Flake8
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install Flake8 & Pylint
      run: |
        python -m pip install -U pip wheel
        python -m pip install -U flake8 -r requirements.txt

    - name: Lint Code
      run: |
        echo "::group::Flake8 - Python ${{ matrix.python-version }}"
        flake8 . --count --select=E9,F63,F7,F82 --format='::error file=%(path)s,line=%(row)d,col=%(col)d,::%(text)s' --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --format='::warning file=%(path)s,line=%(row)d,col=%(col)d,::%(text)s' --statistics
        echo "::endgroup::"

  format:
    name: Black Format
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install Black
        run: |
          python -m pip install -U pip wheel
          python -m pip install -U black

      - name: Check Format
        run: /bin/bash -c 'black --check .; echo "should_format=$?" >> $GITHUB_ENV; exit 0'

      - name: Reformat Code
        if: env.should_format == 1
        run: black .

      - name: Commit New Code
        if: env.should_format == 1
        run: |
          git config --global user.name 'blackbot'
          git config --global user.email 'andre4ik3@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git stash
          git pull
          git stash pop
          git commit -am "[ci-skip] Reformat Code with Black"
          git push origin HEAD:$GITHUB_REF

  scan-1:
    name: GraphQL Scan
    needs: [lint, init]
    if: needs.init.outputs.skip == 'false'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: 'python'
        setup-python-dependencies: false  # can't install uvloop for some reason

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  scan-2:
    name: OSSAR Scan
    needs: [lint, init]
    if: needs.init.outputs.skip == 'false'
    runs-on: windows-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Checkout PR Head
      run: git checkout HEAD^2
      if: github.event_name == 'pull_request'

    - name: Run OSSAR
      uses: github/ossar-action@v1
      id: ossar

    - name: Upload OSSAR Results
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ${{ steps.ossar.outputs.sarifFile }}

  python-test:
    name: Python Tests
    needs: [lint, init]
    if: needs.init.outputs.skip == 'false'
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies & Pytest
      run: |
        python -m pip install -U pip wheel
        python -m pip install -U aiohttp ujson pytest pytest-aiohttp aiofiles

    - name: Run Tests
      run: pytest sleigh/tests

  docker-test:
    name: Docker Tests
    needs: [lint, init]
    if: needs.init.outputs.skip == 'false'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Build Image
      run: docker-compose --file docker-compose.test.yml build

    - name: Run Tests
      run: docker-compose --file docker-compose.test.yml run sut

  pypi-test:
    name: PyPI Publish Package (Test)
    needs: [scan-1, scan-2, python-test, docker-test, format]
    runs-on: ubuntu-latest

    environment:
      name: Python Package Index - Testing
      url: https://test.pypi.org/sleigh-internal

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install Build Dependencies
      run: |
        python -m pip install -U pip wheel
        python -m pip install -U build twine -r requirements.txt

    - name: Build Distribution
      run: cd sleigh; python -m build

    - name: Upload Distribution
      run: python -m twine upload --username __token__ --password ${{ env.PYPI_TOKEN }} sleigh/dist/*

  pypi-publish:
    name: PyPI Publish Package (Production)
    needs: pypi-test
    runs-on: ubuntu-latest

    environment:
      name: Python Package Index - Production
      url: https://pypi.org/sleigh-internal

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install Build Dependencies
      run: |
        python -m pip install -U pip wheel
        python -m pip install -U build twine -r requirements.txt

    - name: Build Distribution
      run: cd sleigh; python -m build

    - name: Upload Distribution
      run: python -m twine upload --username __token__ --password ${{ env.PYPI_TOKEN }} sleigh/dist/*

  docker-push:
    name: Docker Push Container
    needs: pypi-test
    runs-on: ubuntu-latest

    environment:
      name: GitHub Packages
      url: https://github.com/users/andre4ik3/packages/container/package/sleigh

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Image
        run: docker build . --file Dockerfile --tag sleigh

      - name: Get Ready to Push
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/sleigh

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag sleigh $IMAGE_ID:$VERSION

      - name: Login to GitHub Packages
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push Image to GitHub Packages
        run: docker push $IMAGE_ID:$VERSION
